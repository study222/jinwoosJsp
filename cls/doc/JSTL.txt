# JSTL
(Java Standard Tag Library)
==> JSP를 제작하다보면 HTML과 자바가 혼용되어 만들어진다.
	따라서 자바적인 내용을 입력하는 경우 스크립트 릿을 사용해서 입력하게 된다.
	==> 이것은 개발자가 뷰를 제작을 할 때 언제나 고민되는 부분이다.
	
	JSTL이란?
	JSP는 HTML이 우선이 되므로
	자바적인 요소 역시 태그 형식으로 사용할 수 있도록 해서
	통일된 방식으로 문서를 만들 수 있도록 만들어 놓은 라이브러리
	
*****
1. 표현식
	형식 ]
		${출력내용}
	
2. <c:out>
==> 표현식과 동일하게 뭔가를 출력하는 기능을 가진 태그
	<%=내용 %>, ${내용} 과 비슷한 기능
	
	형식 ]
		<c:out value="출력할 내용" />
	
	사용 예 ]
		
		컨트롤러에서 req.setAttribute("NAME", "이지우")
		라고 뷰에게 넘겨주면
		
		<c:out value="${NAME}" />
		
	장점 ]
		동시에 여러개를 출력할 수 있다.
		즉, 스스로가 여러개를 하나의 문자열로 결합해서 출력한다.
		
	예 ]
		<c:out value="${'<tag>, 10'}" />
		
		<tag>, 10이 출력된다.
		

3. <c:set>
	==> 변수에 데이터를 기억해 놓는 기능을 가진 태그
	
	형식 ]
		
		<c:set var="변수이름" value="기억 할 값" />
		
		예 ]
			<c:set var="name" value="이지우" />
			
		라고 기억시키면 사용 할 때는
		
			${name}라고 기술하면 "이지우"가 출력된다.
		
4. <c:remove>
	==> 변수의 데이터를 강제로 삭제하는 기능을 가진 태그
		
		형식 ]
			<c:remove var="삭제할 변수" />
	
*****		
5. <c:if>
	==> 자바의 if 명령에 해당하는 기능을 가진 태그
		
	형식 ]
		<c:if test="조건식">
			몸체
		</c:if>
	
	참고 ]
		아직은 else, else if의 기능이 존재하지 않는다.
		따라서 만약 else 구문이 필요하면 반대의 조건식으로 <c:if> 태그를 사용해야 한다.
	
	***
	JSTL에서는 조건식을 만들때 조건 연산자를 자바에서 사용하는 조건 연산자를 이용 할 수 있고
	JSTL 연산자를 사용 할 수도 있다.
	
		eq		: ==
		lt		: <
		le		: <=
		gt		: >
		ge		: >=
		ne		: !=
		
		and		: &&
		or		: ||
		not		: !
		
		empty	: 데이터가 비어있는지
					부정은 not empty
					

*****
6. <c:choose>
	==> 자바의 switch case 구문과 유사한 기능을 가진
		다중 조건 처리 명령을 위한 태그
		
	형식 ]
		
		<c:choose>
			<c:when test="조건식1">
				처리내용1
			</c:when>
			<c:when test="조건식2">
				처리내용2
			</c:when>
			<c:when test="조건식3">
				처리내용3
			</c:when>
			...
			<c:otherwise>
				처리내용
			</c:otherwise>
		</c:choose>
		
*******
7. <c:forEach>
	==> 자바의 for 명령을 태그로 만들어 놓은 기능
	
	형식 1 ]
		<c:forEach var="변수" begin="시작값" end="종료값" step="증감값" varStatus="상태변수">
		</c:forEach>
		
		varStatus	: 반복 상태를 기억하는 역할을 담당한다.
		
			속성 ]
				
				current	- 현재 꺼낸 데이터를 기억
				index	- 현재 인덱스를 기억
				count	- 현재 회차를 기억
				first	- 현재 반복이 첫번째 반복인지 아닌지 참/거짓으로 기억
				last	- 현재 반복이 마지막 반복인지 아닌지 참/거짓으로 기억
				begin	- 시작값
				end		- 종료값
				step	- 증감값
		
	형식 2 ]
		<c:forEach var="변수" items="배열 혹은 컬렉션 데이터">
		</c:forEach>
		==> 자바의 향상된 for 명령에 해당하는 기능을 태그로 만들어 놓은 것
		
8. <c:forTokens>
	==> 하나의 문자열을 지정한 기호로 분리시켜서 반복하는 태그
		자바로 비유하자면 StringTokenizer와 비슷한 역을 한다.
		
	형식 ]
		<c:forTokens var="변수" items="데이터" delims="구분자">
		</c:forTokens>
		
		참고 ]
			delims는 여러개의 구분문자를 동시에 사용 할 수도 있다.
			
9. <c:redirect>
	==> 강제로 요청을 변경하는
		response.sendRedirect()에 해당하는 태그
		
	형식 1]
		<c:redirect url="새로운 요청" />		==> 일반적인 요청
		
	형식 2]
		<c:redirect url="새로운 요청">
			<c:param name="키값" value="데이터" />
			...
		</c:redirect>